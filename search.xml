<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[常用linux命令]]></title>
      <url>/%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>转载自<a href="http://blog.csdn.net/ljianhui/article/details/11100625" target="_blank" rel="noopener">初窥Linux 之 我最常用的20条命令</a></p>
</blockquote>
<a id="more"></a>
<ol>
<li>cd命令<br>这是一个非常基本，也是大家经常需要使用的命令，它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Docements # 切换到目录/root/Docements  </span><br><span class="line">cd ./path          # 切换到当前目录下的path目录中，“.”表示当前目录    </span><br><span class="line">cd ../path         # 切换到上层目录中的path目录中，“..”表示上一层目录</span><br></pre></td></tr></table></figure>
<ol>
<li>ls命令<br>这是一个非常有用的查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些我常用的参数吧，如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l ：列出长数据串，包含文件的属性与权限数据等  </span><br><span class="line">-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）  </span><br><span class="line">-d ：仅列出目录本身，而不是列出目录的文件数据  </span><br><span class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来  </span><br><span class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</span><br></pre></td></tr></table></figure>
<p>注：这些参数也可以组合使用，下面举两个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l #以长数据串的形式列出当前目录下的数据文件和目录  </span><br><span class="line">ls -lR #以长数据串的形式列出当前目录下的所有文件</span><br></pre></td></tr></table></figure>
<ol>
<li>grep命令<br>该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为<br>grep [-acinv] [–color=auto] <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;查找字符串&apos; filename</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>它的常用参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-a ：将binary文件以text文件的方式查找数据  </span><br><span class="line">-c ：计算找到‘查找字符串’的次数  </span><br><span class="line">-i ：忽略大小写的区别，即把大小写视为相同  </span><br><span class="line">-v ：反向选择，即显示出没有‘查找字符串’内容的那一行  </span><br><span class="line"># 例如：  </span><br><span class="line"># 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色  </span><br><span class="line">grep --color=auto &apos;MANPATH&apos; /etc/man.config  </span><br><span class="line"># 把ls -l的输出中包含字母file（不区分大小写）的内容输出  </span><br><span class="line">ls -l | grep -i file</span><br></pre></td></tr></table></figure></p>
<ol>
<li>find命令<br>find是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多，所以在这里将给把它们分类列出，它的基本语法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]  </span><br><span class="line">  </span><br><span class="line"># 与时间有关的参数：  </span><br><span class="line">-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件；  </span><br><span class="line">-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；  </span><br><span class="line">-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；  </span><br><span class="line">-newer file : 列出比file还要新的文件名  </span><br><span class="line"># 例如：  </span><br><span class="line">find /root -mtime 0 # 在当前目录下查找今天之内有改动的文件  </span><br><span class="line">  </span><br><span class="line"># 与用户或用户组名有关的参数：  </span><br><span class="line">-user name : 列出文件所有者为name的文件  </span><br><span class="line">-group name : 列出文件所属用户组为name的文件  </span><br><span class="line">-uid n : 列出文件所有者为用户ID为n的文件  </span><br><span class="line">-gid n : 列出文件所属用户组为用户组ID为n的文件  </span><br><span class="line"># 例如：  </span><br><span class="line">find /home/ljianhui -user ljianhui # 在目录/home/ljianhui中找出所有者为ljianhui的文件  </span><br><span class="line">  </span><br><span class="line"># 与文件权限及名称有关的参数：  </span><br><span class="line">-name filename ：找出文件名为filename的文件  </span><br><span class="line">-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件  </span><br><span class="line">-tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、  </span><br><span class="line">             目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；  </span><br><span class="line">-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；  </span><br><span class="line">-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示  </span><br><span class="line">-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示  </span><br><span class="line"># 例如：  </span><br><span class="line">find / -name passwd # 查找文件名为passwd的文件  </span><br><span class="line">find . -perm 0755 # 查找当前目录中文件权限的0755的文件  </span><br><span class="line">find . -size +12k # 查找当前目录中大于12KB的文件，注意c表示byte</span><br></pre></td></tr></table></figure>
<ol>
<li>cp命令<br>该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，它的常用参数如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a ：将文件的特性一起复制  </span><br><span class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  </span><br><span class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行  </span><br><span class="line">-r ：递归持续复制，用于目录的复制行为  </span><br><span class="line">-u ：目标文件与源文件有差异时才会复制</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>例如 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2  </span><br><span class="line">cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中</span><br></pre></td></tr></table></figure></p>
<ol>
<li>mv命令<br>该命令用于移动文件、目录或更名，move之意，它的常用参数如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </span><br><span class="line">-i ：若目标文件已经存在，就会询问是否覆盖  </span><br><span class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2 file3 dir # 把文件file1、file2、file3移动到目录dir中  </span><br><span class="line">mv file1 file2 # 把文件file1重命名为file2</span><br></pre></td></tr></table></figure></p>
<ol>
<li>rm命令<br>该命令用于删除文件或目录，remove之间，它的常用参数如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息  </span><br><span class="line">-i ：互动模式，在删除前会询问用户是否操作  </span><br><span class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -i file # 删除文件file，在删除之前会询问是否进行该操作  </span><br><span class="line">rm -fr dir # 强制删除目录dir中的所有文件</span><br></pre></td></tr></table></figure></p>
<ol>
<li>ps命令<br>该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A ：所有的进程均显示出来  </span><br><span class="line">-a ：不与terminal有关的所有进程  </span><br><span class="line">-u ：有效用户的相关进程  </span><br><span class="line">-x ：一般与a参数一起使用，可列出较完整的信息  </span><br><span class="line">-l ：较长，较详细地将PID的信息列出</span><br></pre></td></tr></table></figure>
<p>其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps aux # 查看系统所有的进程数据  </span><br><span class="line">ps ax # 查看不与terminal有关的所有进程  </span><br><span class="line">ps -lA # 查看系统所有的进程数据  </span><br><span class="line">ps axjf # 查看连同一部分进程树状态</span><br></pre></td></tr></table></figure>
<ol>
<li>kill命令<br>该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -signal PID</span><br></pre></td></tr></table></figure>
<p>signal的常用参数如下：<br>注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：SIGHUP，启动被终止的进程  </span><br><span class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </span><br><span class="line">9：SIGKILL，强制中断一个进程的进行  </span><br><span class="line">15：SIGTERM，以正常的结束进程方式来终止进程  </span><br><span class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</span><br></pre></td></tr></table></figure></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程  </span><br><span class="line">kill -SIGTERM %1   </span><br><span class="line"># 重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得  </span><br><span class="line">kill -SIGHUP PID</span><br></pre></td></tr></table></figure>
<ol>
<li>killall命令<br>该命令用于向一个命令启动的进程发送一个信号，它的一般语法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall [-iIe] [command name]</span><br></pre></td></tr></table></figure>
<p>它的参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-i ：交互式的意思，若需要删除时，会询问用户  </span><br><span class="line">-e ：表示后面接的command name要一致，但command name不能超过15个字符  </span><br><span class="line">-I ：命令名称忽略大小写  </span><br><span class="line"># 例如：  </span><br><span class="line">killall -SIGHUP syslogd # 重新启动syslogd</span><br></pre></td></tr></table></figure>
<ol>
<li>file命令<br>该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file filename  </span><br><span class="line">#例如：  </span><br><span class="line">file ./test</span><br></pre></td></tr></table></figure>
<ol>
<li>tar命令<br>该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。它的常用参数如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c ：新建打包文件  </span><br><span class="line">-t ：查看打包文件的内容含有哪些文件名  </span><br><span class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中  </span><br><span class="line">-j ：通过bzip2的支持进行压缩/解压缩  </span><br><span class="line">-z ：通过gzip的支持进行压缩/解压缩  </span><br><span class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来  </span><br><span class="line">-f filename ：filename为要处理的文件  </span><br><span class="line">-C dir ：指定压缩/解压缩的目录dir</span><br></pre></td></tr></table></figure>
<p>上面的解说可以已经让你晕过去了，但是通常我们只需要记住下面三条命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称  </span><br><span class="line">查询：tar -jtv -f filename.tar.bz2  </span><br><span class="line">解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</span><br></pre></td></tr></table></figure>
<p>注：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2</p>
<ol>
<li>cat命令<br>该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat text | less # 查看text文件中的内容  </span><br><span class="line"># 注：这条命令也可以使用less text来代替</span><br></pre></td></tr></table></figure>
<ol>
<li>chgrp命令<br>该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] dirname/filename  </span><br><span class="line">-R ：进行递归的持续对所有文件和子目录更改  </span><br><span class="line"># 例如：  </span><br><span class="line">chgrp users -R ./dir # 递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users</span><br></pre></td></tr></table></figure>
<ol>
<li>chown命令<br>该命令用于改变文件的所有者，与chgrp命令的使用方法相同，只是修改的文件属性不同，不再详述。</li>
<li>chmod命令<br>该命令用于改变文件的权限，一般的用法如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录  </span><br><span class="line">-R：进行递归的持续更改，即连同子目录下的所有文件都会更改</span><br></pre></td></tr></table></figure>
<p>同时，chmod还可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 例如：  </span><br><span class="line">chmod 0755 file # 把file的文件权限改变为-rxwr-xr-x  </span><br><span class="line">chmod g+w file # 向file的文件权限中加入用户组可写权限</span><br></pre></td></tr></table></figure>
<ol>
<li>vim命令<br>该命令主要用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件。vim是一个非常好用的文本编辑器，它里面有很多非常好用的命令，在这里不再多说。你可以从这里下载vim常用操作的详细说明。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-o ：output之意，用于指定生成一个可执行文件的文件名  </span><br><span class="line">-c ：用于把源文件生成目标文件（.o)，并阻止编译器创建一个完整的程序  </span><br><span class="line">-I ：增加编译时搜索头文件的路径  </span><br><span class="line">-L ：增加编译时搜索静态连接库的路径  </span><br><span class="line">-S ：把源文件生成汇编代码文件  </span><br><span class="line">-lm：表示标准库的目录中名为libm.a的函数库  </span><br><span class="line">-lpthread ：连接NPTL实现的线程库  </span><br><span class="line">-std= ：用于指定把使用的C语言的版本  </span><br><span class="line">  </span><br><span class="line"># 例如：  </span><br><span class="line"># 把源文件test.c按照c99标准编译成可执行程序test  </span><br><span class="line">gcc -o test test.c -lm -std=c99  </span><br><span class="line">#把源文件test.c转换为相应的汇编程序源文件test.s  </span><br><span class="line">gcc -S test.c</span><br></pre></td></tr></table></figure>
<ol>
<li>time命令<br>该命令用于测算一个命令（即程序）的执行时间。它的使用非常简单，就像平时输入命令一样，不过在命令的前面加入一个time即可，例如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time ./process  </span><br><span class="line">time ps aux</span><br></pre></td></tr></table></figure>
<p>在程序或命令运行结束后，在最后输出了三个时间，它们分别是：<br>user：用户CPU时间，命令执行完成花费的用户CPU时间，即命令在用户态中执行时间总和；<br>system：系统CPU时间，命令执行完成花费的系统CPU时间，即命令在核心态中执行时间总和；<br>real：实际时间，从command命令行开始执行到运行终止的消逝时间；</p>
<p>注：用户CPU时间和系统CPU时间之和为CPU时间，即命令占用CPU执行的时间总和。实际时间要大于CPU时间，因为Linux是多任务操作系统，往往在执行一条命令时，系统还要处理其它任务。另一个需要注意的问题是即使每次执行相同命令，但所花费的时间也是不一样，其花费时间是与系统运行相关的。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017感谢自己]]></title>
      <url>/2017%E6%84%9F%E8%B0%A2%E8%87%AA%E5%B7%B1.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>再见2017  </p>
</blockquote>
<a id="more"></a>
<h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p>2017年我认清了自己，也从找工作的动荡中熬出来了。大学里的你我都会有过这个体会，都因为看不清未来而感到彷徨迷失，仿佛<strong>生活停滞无法前进，甚至逃避了很久</strong>。<a href="https://www.bilibili.com/video/av2885725/?from=search&amp;seid=4842164823548770278" target="_blank" rel="noopener">后来偶然在B站上搜到了一段视频</a>,明白了虽然但是时间仍在流逝，它如同小舟正在承载着我前进，<strong>生活依然在继续,我只是暂时被黑暗蒙蔽了双眼</strong>。尽管生活中总会有混沌的时候，感谢这段日子里自己一次次又挣扎出来。<br>昨天的我活在梦里，今天的我会去努力动手实践。<strong>Stay hungry,Stay foolish.</strong></p>
<h2 id="Life-is-like-a-boat"><a href="#Life-is-like-a-boat" class="headerlink" title="Life is like a boat"></a>Life is like a boat</h2><p><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=a6c6e1cf0ed79123e0e09372950f3ebf/83025aafa40f4bfb97ab2f93014f78f0f63618f9.jpg" alt="image"><br>作曲 : Rie fu<br>作词 : Rie fu  </p>
<h3 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h3><blockquote>
<p>Nobody knows who I really am,<br>没有人知道我究竟是谁<br>I\’ve never felt this empty before.<br>我以前从未感觉到如此虚无空荡<br>And if I ever need someone to come along,<br>如果我需要有人来陪伴<br>Who\’s gonna comfort me and keep me strong?<br>谁会安慰我并让我更加坚强<br>We are all rowing the boat of fate<br>我们都在命运之湖上荡舟划桨<br>The waves keep on coming and we can\’t escape<br>波浪起伏这而我们无法逃离孤航<br>But if we ever get lost on our way<br>但是假使我们迷失了方向<br>The waves will guide you through another day<br>波浪将指引着我们穿越另一天的曙光<br>遠くで息をしてる<br>在遥远的地方呼吸着<br>透明になったみたい<br>仿佛变成了透明一般<br>暗闇に思えたけど<br>还以为是周遭的黑暗<br>目隠しされてただけ<br>却只是被蒙住了双眼<br>祈りをささげて<br>虔诚地祈祷着<br>新しい日を待つ<br>期待新的一天的到来<br>鮮やかに 光る海<br>闪耀着亮丽光芒的大海<br>その果てまで~<br>一直走到尽头<br>Nobody knows who I really am<br>没有人知道我究竟是谁<br>Maybe they just don\’t give a damn<br>或许他们并不会指责我的荒唐<br>But if I ever need someone to come along<br>但如果我需要有人来陪伴<br>I know you will follow me and keep me strong<br>我知道你会追随我并使我坚强<br>人の心はうつりゆく<br>想从不断变迁的人心<br>抜け出したくなる<br>挣脱出来<br>つきはまた新しい周期で<br>又一轮阴晴圆缺的月亮<br>舟を連れてく<br>牵引着我向前<br>And every time I see your face<br>每一次我看见你的脸庞<br>The oceans lead out to my heart<br>海洋奋力托起我的心脏<br>You make me wanna strain at the oars<br>你令我在荡桨时感到紧张<br>And soon I can\’t see the shore<br>转眼我竟看不到岸的彼方<br>Oh, I can\’t see the shore…<br>啊，我看不到岸的彼方……<br>When will I see the shore?<br>究竟什么时候才能看到岸的彼方？<br>I want you to know who I really am<br>我希望你能知道我的真实<br>I never thought I feel this way toward you<br>我从未想过我将要追随着你的方向<br>And if you ever need someone to come along<br>但如果你需要有人来陪伴<br>I will follow you and keep you strong<br>我将追随着你并使你坚强<br>旅はまだ続いてく<br>旅行依然继续开始<br>穏やかな日も<br>在平淡安稳的日子里<br>つきはまた新しい周期で<br>又一轮阴晴圆缺的月亮<br>舟を照らし出す<br>照射在出行的船上<br>祈りをささげて<br>虔诚地祈祷着<br>新しい日を待つ<br>期待新的一天到来<br>鮮やかに 光る海<br>闪耀着亮丽光芒的大海<br>その果てまで<br>一直走到尽头<br>And everytime I see your face<br>每一次我看到你的脸庞<br>The oceans lead out to my heart<br>海洋奋力托起我的心脏<br>You make me wanna strain at the oars<br>你令我在荡桨时感到紧张<br>And soon I can\’t see the shore<br>转眼间我已经看到岸的彼方<br>運命の舟を漕ぎ<br>荡起命运的小舟<br>波は次から次へと<br>虽然波浪一波一波地<br>私たちを襲うけど<br>向我袭来<br>それも素敵な旅ね<br>这次仍是美好而奇妙的旅行<br>どれも素敵な旅ね<br>每次都是美好而奇妙的旅行</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=640565&auto=0&height=66"></iframe>]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
